/*
 * Azure Functions OpenAPI Extension
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.UUID;
import org.threeten.bp.OffsetDateTime;
/**
 * CloudEvent
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-06T08:57:46.449-05:00[America/Chicago]")
public class CloudEvent {
  @SerializedName("specVersion")
  private String specVersion = null;

  @SerializedName("source")
  private String source = null;

  @SerializedName("id")
  private UUID id = null;

  @SerializedName("person")
  private String person = null;

  @SerializedName("previously")
  private String previously = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("data")
  private String data = null;

  @SerializedName("dataContentType")
  private String dataContentType = null;

  @SerializedName("time")
  private OffsetDateTime time = null;

  public CloudEvent specVersion(String specVersion) {
    this.specVersion = specVersion;
    return this;
  }

   /**
   * The Spec Version for this event.
   * @return specVersion
  **/
  @Schema(description = "The Spec Version for this event.")
  public String getSpecVersion() {
    return specVersion;
  }

  public void setSpecVersion(String specVersion) {
    this.specVersion = specVersion;
  }

  public CloudEvent source(String source) {
    this.source = source;
    return this;
  }

   /**
   * what is the source of this event.
   * @return source
  **/
  @Schema(description = "what is the source of this event.")
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }

  public CloudEvent id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * source generated GUID that uniquely identifies this event.
   * @return id
  **/
  @Schema(description = "source generated GUID that uniquely identifies this event.")
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }

  public CloudEvent person(String person) {
    this.person = person;
    return this;
  }

   /**
   * User ID for the person to whose journey this event will be linked to.
   * @return person
  **/
  @Schema(description = "User ID for the person to whose journey this event will be linked to.")
  public String getPerson() {
    return person;
  }

  public void setPerson(String person) {
    this.person = person;
  }

  public CloudEvent previously(String previously) {
    this.previously = previously;
    return this;
  }

   /**
   * if any other user id was used in the previous context. this will serve as alias going forward.
   * @return previously
  **/
  @Schema(description = "if any other user id was used in the previous context. this will serve as alias going forward.")
  public String getPreviously() {
    return previously;
  }

  public void setPreviously(String previously) {
    this.previously = previously;
  }

  public CloudEvent type(String type) {
    this.type = type;
    return this;
  }

   /**
   * type of event.
   * @return type
  **/
  @Schema(description = "type of event.")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public CloudEvent data(String data) {
    this.data = data;
    return this;
  }

   /**
   * Embedded JSON string. Could contain any valid JSON document.
   * @return data
  **/
  @Schema(description = "Embedded JSON string. Could contain any valid JSON document.")
  public String getData() {
    return data;
  }

  public void setData(String data) {
    this.data = data;
  }

  public CloudEvent dataContentType(String dataContentType) {
    this.dataContentType = dataContentType;
    return this;
  }

   /**
   * Content Type of Data.
   * @return dataContentType
  **/
  @Schema(description = "Content Type of Data.")
  public String getDataContentType() {
    return dataContentType;
  }

  public void setDataContentType(String dataContentType) {
    this.dataContentType = dataContentType;
  }

  public CloudEvent time(OffsetDateTime time) {
    this.time = time;
    return this;
  }

   /**
   * timestamp at source system at time of publishing.
   * @return time
  **/
  @Schema(description = "timestamp at source system at time of publishing.")
  public OffsetDateTime getTime() {
    return time;
  }

  public void setTime(OffsetDateTime time) {
    this.time = time;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloudEvent cloudEvent = (CloudEvent) o;
    return Objects.equals(this.specVersion, cloudEvent.specVersion) &&
        Objects.equals(this.source, cloudEvent.source) &&
        Objects.equals(this.id, cloudEvent.id) &&
        Objects.equals(this.person, cloudEvent.person) &&
        Objects.equals(this.previously, cloudEvent.previously) &&
        Objects.equals(this.type, cloudEvent.type) &&
        Objects.equals(this.data, cloudEvent.data) &&
        Objects.equals(this.dataContentType, cloudEvent.dataContentType) &&
        Objects.equals(this.time, cloudEvent.time);
  }

  @Override
  public int hashCode() {
    return Objects.hash(specVersion, source, id, person, previously, type, data, dataContentType, time);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloudEvent {\n");
    
    sb.append("    specVersion: ").append(toIndentedString(specVersion)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    person: ").append(toIndentedString(person)).append("\n");
    sb.append("    previously: ").append(toIndentedString(previously)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    dataContentType: ").append(toIndentedString(dataContentType)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
