/*
 * Azure Functions OpenAPI Extension
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.CloudEvent;
import io.swagger.client.model.CreateProgressiveProfileViewJobResponseModel;
import io.swagger.client.model.HttpErrorResponse;
import io.swagger.client.model.HttpGenericListObjectResponseJourneyAction;
import io.swagger.client.model.HttpGenericListObjectResponseProfileViewTemplate;
import io.swagger.client.model.HttpGenericObjectResponseJourneyAction;
import io.swagger.client.model.HttpReportObjectResponse;
import io.swagger.client.model.HttpSimpleMessageObjectResponse;
import io.swagger.client.model.JourneyAction;
import io.swagger.client.model.ProfileViewBuilderTemplate;
import io.swagger.client.model.ProfileViewQueryResponse;
import io.swagger.client.model.ProfileViewTemplateCreateModel;
import io.swagger.client.model.TapeReaderResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for JourneyApi
 */
@Ignore
public class JourneyApiTest {

    private final JourneyApi api = new JourneyApi();

    /**
     * Create/Replace Journey Action.
     *
     * Create/Replace Journey Action.   SAS Token Requirements:  - ss&#x3D;action  - sp&#x3D;w
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createJourneyActionTest() throws ApiException {
        JourneyAction body = null;
        String authorization = null;
        HttpSimpleMessageObjectResponse response = api.createJourneyAction(body, authorization);

        // TODO: test validations
    }
    /**
     * Create Profile View Template
     *
     * Create Profile View Template.   SAS Token Requirements:  - ss&#x3D;profile  - sp&#x3D;w
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProfileViewTemplateTest() throws ApiException {
        ProfileViewTemplateCreateModel body = null;
        String authorization = null;
        HttpSimpleMessageObjectResponse response = api.createProfileViewTemplate(body, authorization);

        // TODO: test validations
    }
    /**
     * Starts job to generate Progressive Profile View for a person.
     *
     * Starts job to generate Progressive Profile View for a person. The HTTP response is intended to be compatible with the Polling Consumer Pattern.   SAS Token Requirements:  - ss&#x3D;profile  - p&#x3D;w
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createViewTest() throws ApiException {
        String authorization = null;
        String viewId = null;
        String personId = null;
        String searchFilter = null;
        Boolean skipCache = null;
        Integer X_CACHE_MAXAGE_HOUR = null;
        Integer X_CACHE_MAXAGE_MIN = null;
        CreateProgressiveProfileViewJobResponseModel response = api.createView(authorization, viewId, personId, searchFilter, skipCache, X_CACHE_MAXAGE_HOUR, X_CACHE_MAXAGE_MIN);

        // TODO: test validations
    }
    /**
     * Soft delete Journey Action.
     *
     * Soft delete Journey Action.   SAS Token Requirements:  - ss&#x3D;action  - sp&#x3D;w
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteJourneyActionTest() throws ApiException {
        String authorization = null;
        String id = null;
        HttpSimpleMessageObjectResponse response = api.deleteJourneyAction(authorization, id);

        // TODO: test validations
    }
    /**
     * Delete Profile View Template
     *
     * Delete Profile View Template.   SAS Token Requirements:  - ss&#x3D;profile  - sp&#x3D;w
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProfileViewTemplateTest() throws ApiException {
        String authorization = null;
        String id = null;
        HttpSimpleMessageObjectResponse response = api.deleteProfileViewTemplate(authorization, id);

        // TODO: test validations
    }
    /**
     * Get specific Journey Action.
     *
     * Get specific Journey Action.   SAS Token Requirements:  - ss&#x3D;action  - sp&#x3D;r
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJourneyActionTest() throws ApiException {
        String authorization = null;
        String id = null;
        HttpGenericObjectResponseJourneyAction response = api.getJourneyAction(authorization, id);

        // TODO: test validations
    }
    /**
     * Get all Journey Actions.
     *
     * Get all Journey Actions.   SAS Token Requirements:  - ss&#x3D;action  - sp&#x3D;r
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJourneyActionListTest() throws ApiException {
        String authorization = null;
        String templateId = null;
        HttpGenericListObjectResponseJourneyAction response = api.getJourneyActionList(authorization, templateId);

        // TODO: test validations
    }
    /**
     * Get Profile View Templates
     *
     * Get all/specific Profile View Templates, available for usage by the CJaaS Org and Organization.  SAS Token Requirements:  - ss&#x3D;profile  - sp&#x3D;r
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProfileViewTemplatesTest() throws ApiException {
        String authorization = null;
        String id = null;
        HttpGenericListObjectResponseProfileViewTemplate response = api.getProfileViewTemplates(authorization, id);

        // TODO: test validations
    }
    /**
     * Get Report by Name
     *
     * Get a certain usage report.   SAS Token Requirements:  - ss&#x3D;account  - sp&#x3D;r
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReportByNameTest() throws ApiException {
        String authorization = null;
        String reportname = null;
        HttpReportObjectResponse response = api.getReportByName(authorization, reportname);

        // TODO: test validations
    }
    /**
     * Get the status of a Progressive Profile View Job.
     *
     * Get the status of a Progressive Profile View Job.  SAS Token Requirements:  - ss&#x3D;profile  - p&#x3D;r
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getViewStatusTest() throws ApiException {
        String authorization = null;
        String viewId = null;
        String instanceId = null;
        String personId = null;
        String searchFilter = null;
        api.getViewStatus(authorization, viewId, instanceId, personId, searchFilter);

        // TODO: test validations
    }
    /**
     * Post Events
     *
     * API accepts events that describe what occurred, when, and by whom on every interaction across touch points and applications. Data Ingestion is based on Cloud Events specification for describing event data in a common way. API accepts data in the form of POST with support for Header based authorization.  SAS Token Requirements:  - ss&#x3D;ds  - sp&#x3D;w
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postEventsTest() throws ApiException {
        CloudEvent body = null;
        String authorization = null;
        HttpSimpleMessageObjectResponse response = api.postEvents(body, authorization);

        // TODO: test validations
    }
    /**
     * A Profile is a bespoke view of a customer&#x27;s journey.
     *
     * The profile view is created based on a view template that is provided as input.    **Sample request**: *GET /v1/journey/profileview?customer&#x3D;123XX*    {    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;Name\&quot;: \&quot;Test Template 2\&quot;,    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;DatapointCount\&quot;: 7,    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;Attributes\&quot;: [{    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;Version\&quot;: \&quot;0.1\&quot;,    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;Event\&quot;: \&quot;Add to Cart\&quot;,    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;Metadata\&quot;: \&quot;sku\&quot;,    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;Limit\&quot;: 3,    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;DisplayName\&quot;: \&quot;Items added\&quot;,    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;Verbose\&quot;: false,    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;AggregationMode\&quot;: \&quot;Value\&quot;    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}]    }.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void profileBuilderTest() throws ApiException {
        ProfileViewBuilderTemplate body = null;
        String authorization = null;
        String personId = null;
        ProfileViewQueryResponse response = api.profileBuilder(body, authorization, personId);

        // TODO: test validations
    }
    /**
     * Read Events
     *
     * The Tape holds running stream of customer journey events that arrive onto Data Sink from all channels, across mediums. Tape is an append-only, immutable data ledger that can be queried to retrieve snapshot of latest events that moment in time or historically to play-back events as they occurred to understand or analyze Journeys using ML/AI models.  SAS Token Requirements:  - ss&#x3D;tape  - sp&#x3D;r
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readEventsTest() throws ApiException {
        String authorization = null;
        String $filter = null;
        Integer $top = null;
        TapeReaderResponse response = api.readEvents(authorization, $filter, $top);

        // TODO: test validations
    }
    /**
     * Read Events By Identity
     *
     * The Tape holds running stream of customer journey events that arrive onto Data Sink from all channels - across mediums. Tape is a append-only, immutable data ledger that can be queried to retrieve snapshot of latest events that moment in time or historically to play-back events as they occurred to understand or analyze Journeys using ML/AI models.  SAS Token Requirements:  - ss&#x3D;tape  - sp&#x3D;r
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readEventsByIdentityTest() throws ApiException {
        String authorization = null;
        String identity = null;
        String $filter = null;
        Integer $top = null;
        TapeReaderResponse response = api.readEventsByIdentity(authorization, identity, $filter, $top);

        // TODO: test validations
    }
    /**
     * Read Streams
     *
     * Real-time streaming enables API consumers to listen for events as it arrives part of the Journey, these may be transformed, value added / enriched and ready to be consumed or forwarded to an another destination. Optionally accepts $filter to slice/dice further (ex: type eq &#x27;Add to Cart&#x27;).  SAS Token Requirements:  - ss&#x3D;stream  - sp&#x3D;r
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readStreamsTest() throws ApiException {
        String sig = null;
        String authorization = null;
        String response = api.readStreams(sig, authorization);

        // TODO: test validations
    }
    /**
     * Read Streams by Person
     *
     * Real-time streaming enables API consumers to listen for events as it arrives part of the Journey, these may be transformed, value added / enriched and ready to be consumed or forwarded to an another destination. Optionally accepts $filter to slice/dice further (ex: type eq &#x27;Add to Cart&#x27;).  SAS Token Requirements:  - ss&#x3D;stream  - sp&#x3D;r
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readStreamsByPersonTest() throws ApiException {
        String person = null;
        String sig = null;
        String authorization = null;
        String response = api.readStreamsByPerson(person, sig, authorization);

        // TODO: test validations
    }
}
