openapi: 3.0.1
info:
  title: Azure Functions Open API Extension
  version: 1.0.0
servers:
- url: https://cjaasplayground-edge.azurewebsites.net/
paths:
  /ClearTape:
    delete:
      summary: Delete All Events Collected within Namespace(i.e Org)
      description: Delete All Events Collected for Org
      operationId: ClearTape
      parameters:
      - name: Authorization
        in: header
        description: SAS Signature
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-ms-summary: SAS Signature
          x-ms-visibility: important
        x-ms-summary: SAS Signature
        x-ms-visibility: important
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
          x-ms-summary: Clean Tape Operation Result
      x-ms-visibility: important
      x-swagger-router-controller: Default
  /ClearTape/{person}:
    delete:
      summary: Delete Events Collected on Specific Person
      description: Delete Events on Specific Person
      operationId: ClearTapeByPerson
      parameters:
      - name: Authorization
        in: header
        description: SAS Signature
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-ms-summary: SAS Signature
          x-ms-visibility: important
        x-ms-summary: SAS Signature
        x-ms-visibility: important
      - name: person
        in: path
        description: Unique Person ID to filter by
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-ms-summary: Person ID to filter by
          x-ms-visibility: important
        x-ms-summary: Person ID to filter by
        x-ms-visibility: important
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
          x-ms-summary: Clean Tape Operation Result
      x-ms-visibility: important
      x-swagger-router-controller: Default
  /DataSink:
    get:
      summary: Data sink accepts events that describe what occurred - when - by whom
        on every interaction across touchpoints and applications
      description: Data Ingestion is based on Cloud Events specification for describing
        event data in a common way. Data Sink accepts data in the form of POST or
        GET with support for both Header based authorization and as-well via Query
        string
      operationId: DataSinkGet
      parameters:
      - name: sig
        in: query
        description: SAS Signature within QueryString
        required: true
        style: form
        explode: true
        schema:
          type: string
          x-ms-summary: SAS Signature within QueryString
          x-ms-visibility: important
        x-ms-summary: SAS Signature within QueryString
        x-ms-visibility: important
      - name: data
        in: query
        description: CloudEvent Serialized as Base64 UTF8 String
        required: true
        style: form
        explode: true
        schema:
          type: string
          x-ms-summary: CloudEvent Serialized as Base64 UTF8 String
          x-ms-visibility: important
        x-ms-summary: CloudEvent Serialized as Base64 UTF8 String
        x-ms-visibility: important
      responses:
        "202":
          description: Ack of being accepted for processing
          content: {}
          x-ms-summary: Ack of being accepted for processing
        "400":
          description: Unable to accept for processing
          content: {}
          x-ms-summary: Posted Event does not conform to valid format
      x-ms-visibility: important
      x-swagger-router-controller: Default
  /v1/journey/events:
    post:
      tags:
      - Journey
      summary: Post Events
      description: API accepts events that describe what occurred - when - by whom
        on every interaction across touch points and applications. Data Ingestion
        is based on Cloud Events specification for describing event data in a common
        way. API accepts data in the form of POST with support for Header based authorization.
      operationId: Events
      parameters:
      - name: Authorization
        in: header
        description: SAS Signature.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-ms-summary: SAS Signature
          x-ms-visibility: important
        x-ms-summary: SAS Signature
        x-ms-visibility: important
      requestBody:
        content:
          application/cloudevents+json:
            schema:
              $ref: '#/components/schemas/cloudEvent'
        required: true
      responses:
        "202":
          description: Ack of being accepted for processing.
          content: {}
          x-ms-summary: Ack of being accepted for processing
        "400":
          description: Unable to accept for processing.
          content: {}
          x-ms-summary: Posted Event does not conform to valid format
      x-ms-visibility: important
      x-codegen-request-body-name: body
      x-swagger-router-controller: Journey
  /v1/journey/identities:
    get:
      tags:
      - Journey
      summary: Journeys are built around a concept of Identity. An identity shapes
        how Journey is connected together. Get Identity by Id.
      description: Journeys are built around a concept of Identity. An identity shapes
        how Journey is connected together. Retrieve Identity of an individual by their
        ID.
      operationId: Identities
      parameters:
      - name: Authorization
        in: header
        description: SAS Signature.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-ms-summary: SAS Signature
          x-ms-visibility: important
        x-ms-summary: SAS Signature
        x-ms-visibility: important
      - name: id
        in: query
        description: Unique Person ID to retrieve data.
        required: true
        style: form
        explode: true
        schema:
          type: string
          x-ms-summary: Person ID
          x-ms-visibility: important
        x-ms-summary: Person ID
        x-ms-visibility: important
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
          x-ms-summary: Result of Identities Operation
      x-ms-visibility: important
      x-swagger-router-controller: Journey
    delete:
      tags:
      - Journey
      summary: Delete a Identity
      description: Remove a soft merge.
      operationId: IdentitiesDelete
      parameters:
      - name: Authorization
        in: header
        description: SAS Signature.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-ms-summary: SAS Signature
          x-ms-visibility: important
        x-ms-summary: SAS Signature
        x-ms-visibility: important
      - name: id
        in: query
        description: Unique Person ID to clear data.
        required: true
        style: form
        explode: true
        schema:
          type: string
          x-ms-summary: Person ID to clear data
          x-ms-visibility: important
        x-ms-summary: Person ID to clear data
        x-ms-visibility: important
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
          x-ms-summary: Result of Identities Operation
      x-ms-visibility: important
      x-swagger-router-controller: Journey
  /v1/journey/identities/{id}/aliases:
    post:
      tags:
      - Journey
      summary: Tie multiple duplicate Identities together to a unique single individual
        nondestructively (i.e soft merge) without modifying the Tape
      description: Every event in the Journey has an Identity of the originating individual,
        different channels can have their own unique Identities, API consumers can
        tie multiple duplicate Identities together to a unique single individual nondestructively
        (i.e soft merge) without modifying the Tape. Once aliased, all duplicates
        are treated as a single Identity for any purpose (Query or View).
      operationId: IdentitiesAlias
      parameters:
      - name: Authorization
        in: header
        description: SAS Signature.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-ms-summary: SAS Signature
          x-ms-visibility: important
        x-ms-summary: SAS Signature
        x-ms-visibility: important
      - name: id
        in: path
        description: Unique Person ID to apply action/query upon.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-ms-summary: Person ID to apply action/query upon
          x-ms-visibility: important
        x-ms-summary: Person ID to apply action/query upon
        x-ms-visibility: important
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/identityAliases'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
          x-ms-summary: Result of Identities Operation
      x-ms-visibility: important
      x-codegen-request-body-name: body
      x-swagger-router-controller: Journey
  /Keys/{id}:
    delete:
      summary: CJaaS APIs are designed to be accessed with Shared Access Signature(SAS)
        to resources without transmitting any actual sensitive keys(hello! API Keys)
        or even exchanging a password for a proxy such as oAuth bearer
      description: 'With Shared Access Signatures API consumers get choice of granular
        control on how to access API(paths), which resources to scope(ex:datasink),
        with what permissions the request needs(read / write), from which  source
        (ex: website) and how long(10s to 10 years) among many other parameters.'
      operationId: KeysDelete
      parameters:
      - name: Authorization
        in: header
        description: SAS Signature
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-ms-summary: SAS Signature
          x-ms-visibility: important
        x-ms-summary: SAS Signature
        x-ms-visibility: important
      - name: id
        in: path
        description: Unique Key name to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-ms-summary: Key ID to delete
          x-ms-visibility: important
        x-ms-summary: Key ID to delete
        x-ms-visibility: important
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
          x-ms-summary: Key Operation Result
      x-ms-visibility: important
      x-swagger-router-controller: Default
  /Keys/{operation}/{id}:
    get:
      summary: Create or Rotate or Delete a Specific Key
      description: 'With Shared Access Signatures API consumers get choice of granular
        control on how to access API(paths), which resources to scope(ex:datasink),
        with what permissions the request needs(read / write), from which  source
        (ex: website) and how long(10s to 10 years) among many other parameters.'
      operationId: Keys
      parameters:
      - name: Authorization
        in: header
        description: SAS Signature
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-ms-summary: SAS Signature
          x-ms-visibility: important
        x-ms-summary: SAS Signature
        x-ms-visibility: important
      - name: operation
        in: path
        description: 'Key Operation Type: list or create or rotate'
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-ms-summary: Type of Key Operation to Create/Rotate or Delete Key
          x-ms-visibility: important
        x-ms-summary: Type of Key Operation to Create/Rotate or Delete Key
        x-ms-visibility: important
      - name: id
        in: path
        description: Unique Key name as set
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-ms-summary: Key ID to apply action upon
          x-ms-visibility: important
        x-ms-summary: Key ID to apply action upon
        x-ms-visibility: important
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
          x-ms-summary: Key Operation Result
      x-ms-visibility: important
      x-swagger-router-controller: Default
  /Keys/list:
    get:
      summary: List All SAS Keys
      description: 'With Shared Access Signatures API consumers get choice of granular
        control on how to access API(paths), which resources to scope(ex:datasink),
        with what permissions the request needs(read / write), from which  source
        (ex: website) and how long(10s to 10 years) among many other parameters.'
      operationId: KeysList
      parameters:
      - name: Authorization
        in: header
        description: SAS Signature
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-ms-summary: SAS Signature
          x-ms-visibility: important
        x-ms-summary: SAS Signature
        x-ms-visibility: important
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
          x-ms-summary: Key Operation Result
      x-ms-visibility: important
      x-swagger-router-controller: Default
  /Orchestration/Trigger/{person}:
    post:
      summary: Trigger a Online Orchestration such as Webex Walkin or Display Offer
        Or Chat Bot to intercept and modify your Customer's Journey Midway
      description: Trigger a Online Orchestration such as Webex Walkin or Display
        Offer Or Chat Bot to modify your Customer's Journey Midway
      operationId: OnlineOrchestrationTrigger
      parameters:
      - name: sig
        in: query
        description: Optional SAS Signature within QueryString
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-ms-summary: Optional SAS Signature within QueryString
          x-ms-visibility: important
        x-ms-summary: Optional SAS Signature within QueryString
        x-ms-visibility: important
      - name: Authorization
        in: header
        description: Optional SAS Signature within Header
        required: false
        style: simple
        explode: false
        schema:
          type: string
          x-ms-summary: Optional SAS Signature within Header
          x-ms-visibility: important
        x-ms-summary: Optional SAS Signature within Header
        x-ms-visibility: important
      - name: person
        in: path
        description: Unique Person ID to filter by
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-ms-summary: Person ID to filter by
          x-ms-visibility: important
        x-ms-summary: Person ID to filter by
        x-ms-visibility: important
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/onlineOrchestration'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
          x-ms-summary: Descriptive Status
        "400":
          description: Failed operation
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
          x-ms-summary: Failed Request with Optional Reason
      x-ms-visibility: important
      x-codegen-request-body-name: body
      x-swagger-router-controller: Default
  /v1/journey/profileview:
    post:
      tags:
      - Journey
      summary: A Profile is a bespoke view of a customer's journey.
      description: "The profile view is created based on a view template that is provided\
        \ as input.  \r\n**Sample request**: *GET /v1/journey/profileview?customer=123XX*\
        \  \r\n{  \r\n&nbsp;&nbsp;&nbsp;&nbsp;\"Name\": \"Test Template 2\",  \r\n\
        &nbsp;&nbsp;&nbsp;&nbsp;\"DatapointCount\": 7,  \r\n&nbsp;&nbsp;&nbsp;&nbsp;\"\
        Attributes\": [{  \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Version\"\
        : \"0.1\",  \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Event\"\
        : \"Add to Cart\",  \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"\
        Metadata\": \"sku\",  \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"\
        Limit\": 3,  \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"DisplayName\"\
        : \"Items added\",  \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"\
        Verbose\": false,  \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"\
        AggregationMode\": \"Value\"  \r\n&nbsp;&nbsp;&nbsp;&nbsp;}]  \r\n}."
      operationId: ProfileBuilder
      parameters:
      - name: Authorization
        in: header
        description: SAS Signature.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-ms-summary: SAS Signature
          x-ms-visibility: important
        x-ms-summary: SAS Signature
        x-ms-visibility: important
      - name: PersonId
        in: query
        description: Identifies the person for whom the profile view is requested.
        required: true
        style: form
        explode: true
        schema:
          type: string
          x-ms-summary: Person ID
          x-ms-visibility: important
        x-ms-summary: Person ID
        x-ms-visibility: important
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/profileViewBuilderTemplate'
        required: true
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/profileViewQueryResponse'
          x-ms-summary: Query Result of Events Found
        "400":
          description: Error occured while building profile view with the requested
            template parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/object'
          x-ms-summary: Error occured while building profile view with the requested
            template parameters
        "404":
          description: No matching events were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/object'
          x-ms-summary: Empty view as no no matching events were found
      x-ms-visibility: important
      x-codegen-request-body-name: body
      x-swagger-router-controller: Journey
  /Real-time:
    get:
      summary: Real-time streaming enables API consumers to listen for events as it
        arrives part of the Journey, these may be transformed, value added / enriched
        and ready to be consumed or forwarded to an another destination
      description: 'Optionally accepts $filter to slice/dice further (ex: type eq
        ''Add to Cart'')'
      operationId: Real-timeSSE
      parameters:
      - name: sig
        in: query
        description: Optional SAS Signature within QueryString
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-ms-summary: Optional SAS Signature within QueryString
          x-ms-visibility: important
        x-ms-summary: Optional SAS Signature within QueryString
        x-ms-visibility: important
      - name: Authorization
        in: header
        description: Optional SAS Signature within Header
        required: false
        style: simple
        explode: false
        schema:
          type: string
          x-ms-summary: Optional SAS Signature within Header
          x-ms-visibility: important
        x-ms-summary: Optional SAS Signature within Header
        x-ms-visibility: important
      responses:
        "200":
          description: Successful operation
          content:
            text/event-stream:
              schema:
                type: string
                x-content-type: text/event-stream
          x-ms-summary: Server Sent Events (SSE) Stream
      x-ms-visibility: important
      x-swagger-router-controller: Default
  /Real-time/{person}:
    get:
      summary: Real-time streaming enables API consumers to listen for events as it
        arrives part of the Journey, these may be transformed, value added / enriched
        and ready to be consumed or forwarded to an another destination
      description: 'Optionally accepts $filter to slice/dice further (ex: type eq
        ''Add to Cart'')'
      operationId: Real-timeSSEPerson
      parameters:
      - name: sig
        in: query
        description: Optional SAS Signature within QueryString
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-ms-summary: Optional SAS Signature within QueryString
          x-ms-visibility: important
        x-ms-summary: Optional SAS Signature within QueryString
        x-ms-visibility: important
      - name: Authorization
        in: header
        description: Optional SAS Signature within Header
        required: false
        style: simple
        explode: false
        schema:
          type: string
          x-ms-summary: Optional SAS Signature within Header
          x-ms-visibility: important
        x-ms-summary: Optional SAS Signature within Header
        x-ms-visibility: important
      - name: person
        in: path
        description: Unique Person ID to filter by
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-ms-summary: Person ID to filter by
          x-ms-visibility: important
        x-ms-summary: Person ID to filter by
        x-ms-visibility: important
      responses:
        "200":
          description: Successful operation
          content:
            text/event-stream:
              schema:
                type: string
                x-content-type: text/event-stream
          x-ms-summary: Server Sent Events (SSE) Stream
      x-ms-visibility: important
      x-swagger-router-controller: Default
  /Settings:
    get:
      summary: API consumers can fully manage their Journey/CDP capabilities and settings
        using the Account Management endpoints
      description: Update, get data retention, destinations and more
      operationId: Settings
      parameters:
      - name: Authorization
        in: header
        description: SAS Signature
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-ms-summary: SAS Signature
          x-ms-visibility: important
        x-ms-summary: SAS Signature
        x-ms-visibility: important
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accountSettings'
          x-ms-summary: Settings Operation Result
      x-ms-visibility: important
      x-swagger-router-controller: Default
    post:
      summary: API consumers can fully manage their Journey/CDP capabilities and settings
        using the Account Management endpoints
      description: Update, get data retention, destinations and more
      operationId: UpdateSettings
      parameters:
      - name: Authorization
        in: header
        description: SAS Signature
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-ms-summary: SAS Signature
          x-ms-visibility: important
        x-ms-summary: SAS Signature
        x-ms-visibility: important
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accountSettings'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accountSettings'
          x-ms-summary: Settings Operation Result
      x-ms-visibility: important
      x-codegen-request-body-name: body
      x-swagger-router-controller: Default
  /Journey:
    get:
      summary: The Tape holds running stream of customer journey events that arrive
        onto Data Sink from all channels - across mediums
      description: Tape is a append-only, immutable data ledger that can be queried
        to retrieve snapshot of latest events that moment in time or historically
        to play-back events as they occurred to understand or analyze Journeys using
        ML/AI models
      operationId: Journeys
      parameters:
      - name: Authorization
        in: header
        description: SAS Signature
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-ms-summary: SAS Signature
          x-ms-visibility: important
        x-ms-summary: SAS Signature
        x-ms-visibility: important
      - name: $filter
        in: query
        description: 'oData Filter Expressions to Slice/Dice Search, ex: type eq ''Add
          To Cart'''
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-ms-summary: oData Filter Expressions to Slice/Dice
          x-ms-visibility: important
        x-ms-summary: oData Filter Expressions to Slice/Dice
        x-ms-visibility: important
      - name: $top
        in: query
        description: Limit to return latest x events
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          x-ms-summary: Return x top events
          x-ms-visibility: important
        x-ms-summary: Return x top events
        x-ms-visibility: important
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/cloudEvent'
                x-content-type: application/json
          x-ms-summary: Query Result of Events Found
      x-ms-visibility: important
      x-swagger-router-controller: Default
  /Journey/{person}:
    get:
      summary: The Tape holds running stream of customer journey events that arrive
        onto Data Sink from all channels - across mediums
      description: Tape is a append-only, immutable data ledger that can be queried
        to retrieve snapshot of latest events that moment in time or historically
        to play-back events as they occurred to understand or analyze Journeys using
        ML/AI models
      operationId: JourneysByPerson
      parameters:
      - name: Authorization
        in: header
        description: SAS Signature
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-ms-summary: SAS Signature
          x-ms-visibility: important
        x-ms-summary: SAS Signature
        x-ms-visibility: important
      - name: person
        in: path
        description: Unique Person ID to filter by
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-ms-summary: Person ID to filter by
          x-ms-visibility: important
        x-ms-summary: Person ID to filter by
        x-ms-visibility: important
      - name: $filter
        in: query
        description: 'oData Filter Expressions to Slice/Dice Search, ex: type eq ''Add
          To Cart'''
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-ms-summary: oData Filter Expressions to Slice/Dice
          x-ms-visibility: important
        x-ms-summary: oData Filter Expressions to Slice/Dice
        x-ms-visibility: important
      - name: $top
        in: query
        description: Limit to return latest x events
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          x-ms-summary: Return x top events
          x-ms-visibility: important
        x-ms-summary: Return x top events
        x-ms-visibility: important
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/cloudEvent'
                x-content-type: application/json
          x-ms-summary: Query Result of Events Found
      x-ms-visibility: important
      x-swagger-router-controller: Default
  /Walkin/{person}:
    get:
      summary: SSE Channel for Webex Walkin Orchestration to Modify Journeys Midway
      description: Major browsers offer built-in class EventSource, with the EventSource
        object API consumers can automatically establishes a persistent connection
        and transparently allow for automatic reconnects with tunable retry timeout
        & Message ids to resume events.
      operationId: WebexWalkinSSE
      parameters:
      - name: sig
        in: query
        description: Optional SAS Signature within QueryString
        required: false
        style: form
        explode: true
        schema:
          type: string
          x-ms-summary: Optional SAS Signature within QueryString
          x-ms-visibility: important
        x-ms-summary: Optional SAS Signature within QueryString
        x-ms-visibility: important
      - name: Authorization
        in: header
        description: Optional SAS Signature within Header
        required: false
        style: simple
        explode: false
        schema:
          type: string
          x-ms-summary: Optional SAS Signature within Header
          x-ms-visibility: important
        x-ms-summary: Optional SAS Signature within Header
        x-ms-visibility: important
      - name: person
        in: path
        description: Unique Person ID to filter by
        required: true
        style: simple
        explode: false
        schema:
          type: string
          x-ms-summary: Person ID to filter by
          x-ms-visibility: important
        x-ms-summary: Person ID to filter by
        x-ms-visibility: important
      responses:
        "200":
          description: Successful operation
          content:
            text/event-stream:
              schema:
                type: string
                x-content-type: text/event-stream
          x-ms-summary: Server Sent Events (SSE) Stream
      x-ms-visibility: important
      x-swagger-router-controller: Default
components:
  schemas:
    accountSettings:
      type: object
      properties:
        dataRetentionDays:
          type: integer
          format: int32
        destinationSubscriptions:
          type: array
          items:
            type: string
        webexTokenIssuer:
          type: string
        webexTokenIssuerSecret:
          type: string
      example:
        webexTokenIssuer: webexTokenIssuer
        destinationSubscriptions:
        - destinationSubscriptions
        - destinationSubscriptions
        webexTokenIssuerSecret: webexTokenIssuerSecret
        dataRetentionDays: 0
    cloudEvent:
      type: object
      properties:
        specVersion:
          type: string
          description: The Spec Version for this event.
        source:
          type: string
          description: what is the source of this event.
        id:
          type: string
          description: source generated GUID that uniquely identifies this event.
          format: uuid
        person:
          type: string
          description: User ID for the person to whose journey this event will be
            linked to.
        previously:
          type: string
          description: if any other user id was used in the previous context. this
            will serve as alias going forward.
        type:
          type: string
          description: type of event.
        data:
          type: string
          description: Embedded JSON string. Could contain any valid JSON document.
        dataContentType:
          type: string
          description: Content Type of Data.
        time:
          type: string
          description: timestamp at source system at time of publishing.
          format: date-time
      example:
        specVersion: specVersion
        previously: previously
        data: data
        person: person
        source: source
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        time: 2000-01-23T04:56:07.000+00:00
        type: type
        dataContentType: dataContentType
    identityAliases:
      type: object
      properties:
        aliases:
          type: array
          description: List of Aliases value to associate an identity with. This identity's
            events can be looked up with any of the given aliases. It is a override
            operation. Existing set of aliases will be overridden with the new set.
          items:
            type: string
    object:
      type: object
    onlineOrchestration:
      type: object
      properties:
        typeOfOffer:
          type: string
        displayTitle:
          type: string
        displayMessage:
          type: string
        offerImage:
          type: string
        maxWidth:
          type: integer
          format: int32
        link:
          type: string
        oneTimeJWT:
          type: string
        connectID:
          type: string
        validTill:
          type: string
          format: date-time
    profileAttributeView:
      type: object
      properties:
        queryTemplate:
          $ref: '#/components/schemas/profileViewBuilderTemplateAttribute'
        result:
          type: string
        journeyEvents:
          type: string
      example:
        result: result
        queryTemplate:
          metadata: metadata
          displayName: displayName
          limit: 0
          event: event
          version: version
          aggregationMode: aggregationMode
          verbose: true
        journeyEvents: journeyEvents
    profileViewBuilderTemplate:
      type: object
      properties:
        name:
          type: string
          description: Name of the view to be built.
        datapointCount:
          type: integer
          description: Number of Journey events to be considered, in order to build
            the view.
          format: int32
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/profileViewBuilderTemplateAttribute'
    profileViewBuilderTemplateAttribute:
      type: object
      properties:
        version:
          type: string
          description: Attribute version. Depending on version the evaluation procedure
            might change.
        event:
          type: string
          description: The Tape Event to search for.
        metadata:
          type: string
          description: The specific metadata of the Tape Event, that needs to be evaluated.
        limit:
          type: integer
          description: This will limit the number of matching tape events that are
            used, for building the view.
          format: int32
        displayName:
          type: string
          description: Post evaluation the result to be generated using this display
            name.
        aggregationMode:
          type: string
          description: 'Indicates how the matching events will be aggregated. "Value":
            All the metadata will be concatenated in a comma-separated string."Count":
            We will evaluate the count of occurrences of the event metadata in the
            specified time period."Sum": We will attempt to parse the metadata as
            integer and add the values."Max", "Average", "Min": The metadata will
            be parsed as integer and then Max/Avg/Min of the values will be calculated
            respectively."Distinct": We will select only the unique items from the
            metadata. '
        verbose:
          type: boolean
          description: If set to true, indicates that the matching Journey Events
            to be included in the response as well.
      example:
        metadata: metadata
        displayName: displayName
        limit: 0
        event: event
        version: version
        aggregationMode: aggregationMode
        verbose: true
    profileViewQueryResponse:
      type: object
      properties:
        name:
          type: string
        customerId:
          type: string
        generatedAt:
          type: string
          format: date-time
        attributeView:
          type: array
          items:
            $ref: '#/components/schemas/profileAttributeView'
      example:
        attributeView:
        - result: result
          queryTemplate:
            metadata: metadata
            displayName: displayName
            limit: 0
            event: event
            version: version
            aggregationMode: aggregationMode
            verbose: true
          journeyEvents: journeyEvents
        - result: result
          queryTemplate:
            metadata: metadata
            displayName: displayName
            limit: 0
            event: event
            version: version
            aggregationMode: aggregationMode
            verbose: true
          journeyEvents: journeyEvents
        name: name
        customerId: customerId
        generatedAt: 2000-01-23T04:56:07.000+00:00
x-original-swagger-version: "2.0"
