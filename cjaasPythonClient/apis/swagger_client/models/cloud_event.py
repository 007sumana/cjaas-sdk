# coding: utf-8

"""
    Azure Functions OpenAPI Extension

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CloudEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'spec_version': 'str',
        'source': 'str',
        'id': 'str',
        'person': 'str',
        'previously': 'str',
        'type': 'str',
        'data': 'str',
        'data_content_type': 'str',
        'time': 'datetime'
    }

    attribute_map = {
        'spec_version': 'specVersion',
        'source': 'source',
        'id': 'id',
        'person': 'person',
        'previously': 'previously',
        'type': 'type',
        'data': 'data',
        'data_content_type': 'dataContentType',
        'time': 'time'
    }

    def __init__(self, spec_version=None, source=None, id=None, person=None, previously=None, type=None, data=None, data_content_type=None, time=None):  # noqa: E501
        """CloudEvent - a model defined in Swagger"""  # noqa: E501
        self._spec_version = None
        self._source = None
        self._id = None
        self._person = None
        self._previously = None
        self._type = None
        self._data = None
        self._data_content_type = None
        self._time = None
        self.discriminator = None
        if spec_version is not None:
            self.spec_version = spec_version
        if source is not None:
            self.source = source
        if id is not None:
            self.id = id
        if person is not None:
            self.person = person
        if previously is not None:
            self.previously = previously
        if type is not None:
            self.type = type
        if data is not None:
            self.data = data
        if data_content_type is not None:
            self.data_content_type = data_content_type
        if time is not None:
            self.time = time

    @property
    def spec_version(self):
        """Gets the spec_version of this CloudEvent.  # noqa: E501

        The Spec Version for this event.  # noqa: E501

        :return: The spec_version of this CloudEvent.  # noqa: E501
        :rtype: str
        """
        return self._spec_version

    @spec_version.setter
    def spec_version(self, spec_version):
        """Sets the spec_version of this CloudEvent.

        The Spec Version for this event.  # noqa: E501

        :param spec_version: The spec_version of this CloudEvent.  # noqa: E501
        :type: str
        """

        self._spec_version = spec_version

    @property
    def source(self):
        """Gets the source of this CloudEvent.  # noqa: E501

        what is the source of this event.  # noqa: E501

        :return: The source of this CloudEvent.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CloudEvent.

        what is the source of this event.  # noqa: E501

        :param source: The source of this CloudEvent.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def id(self):
        """Gets the id of this CloudEvent.  # noqa: E501

        source generated GUID that uniquely identifies this event.  # noqa: E501

        :return: The id of this CloudEvent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CloudEvent.

        source generated GUID that uniquely identifies this event.  # noqa: E501

        :param id: The id of this CloudEvent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def person(self):
        """Gets the person of this CloudEvent.  # noqa: E501

        User ID for the person to whose journey this event will be linked to.  # noqa: E501

        :return: The person of this CloudEvent.  # noqa: E501
        :rtype: str
        """
        return self._person

    @person.setter
    def person(self, person):
        """Sets the person of this CloudEvent.

        User ID for the person to whose journey this event will be linked to.  # noqa: E501

        :param person: The person of this CloudEvent.  # noqa: E501
        :type: str
        """

        self._person = person

    @property
    def previously(self):
        """Gets the previously of this CloudEvent.  # noqa: E501

        if any other user id was used in the previous context. this will serve as alias going forward.  # noqa: E501

        :return: The previously of this CloudEvent.  # noqa: E501
        :rtype: str
        """
        return self._previously

    @previously.setter
    def previously(self, previously):
        """Sets the previously of this CloudEvent.

        if any other user id was used in the previous context. this will serve as alias going forward.  # noqa: E501

        :param previously: The previously of this CloudEvent.  # noqa: E501
        :type: str
        """

        self._previously = previously

    @property
    def type(self):
        """Gets the type of this CloudEvent.  # noqa: E501

        type of event.  # noqa: E501

        :return: The type of this CloudEvent.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CloudEvent.

        type of event.  # noqa: E501

        :param type: The type of this CloudEvent.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def data(self):
        """Gets the data of this CloudEvent.  # noqa: E501

        Embedded JSON string. Could contain any valid JSON document.  # noqa: E501

        :return: The data of this CloudEvent.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this CloudEvent.

        Embedded JSON string. Could contain any valid JSON document.  # noqa: E501

        :param data: The data of this CloudEvent.  # noqa: E501
        :type: str
        """

        self._data = data

    @property
    def data_content_type(self):
        """Gets the data_content_type of this CloudEvent.  # noqa: E501

        Content Type of Data.  # noqa: E501

        :return: The data_content_type of this CloudEvent.  # noqa: E501
        :rtype: str
        """
        return self._data_content_type

    @data_content_type.setter
    def data_content_type(self, data_content_type):
        """Sets the data_content_type of this CloudEvent.

        Content Type of Data.  # noqa: E501

        :param data_content_type: The data_content_type of this CloudEvent.  # noqa: E501
        :type: str
        """

        self._data_content_type = data_content_type

    @property
    def time(self):
        """Gets the time of this CloudEvent.  # noqa: E501

        timestamp at source system at time of publishing.  # noqa: E501

        :return: The time of this CloudEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this CloudEvent.

        timestamp at source system at time of publishing.  # noqa: E501

        :param time: The time of this CloudEvent.  # noqa: E501
        :type: datetime
        """

        self._time = time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CloudEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
