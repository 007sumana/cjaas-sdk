# coding: utf-8

"""
    Azure Functions OpenAPI Extension

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JourneyAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'organization': 'str',
        'namespace': 'str',
        'version': 'str',
        'active': 'bool',
        'template_id': 'str',
        'rules': 'object',
        'actions': 'list[Action]'
    }

    attribute_map = {
        'name': 'name',
        'organization': 'organization',
        'namespace': 'namespace',
        'version': 'version',
        'active': 'active',
        'template_id': 'templateId',
        'rules': 'rules',
        'actions': 'actions'
    }

    def __init__(self, name=None, organization=None, namespace=None, version=None, active=None, template_id=None, rules=None, actions=None):  # noqa: E501
        """JourneyAction - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._organization = None
        self._namespace = None
        self._version = None
        self._active = None
        self._template_id = None
        self._rules = None
        self._actions = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if organization is not None:
            self.organization = organization
        if namespace is not None:
            self.namespace = namespace
        if version is not None:
            self.version = version
        if active is not None:
            self.active = active
        if template_id is not None:
            self.template_id = template_id
        if rules is not None:
            self.rules = rules
        if actions is not None:
            self.actions = actions

    @property
    def name(self):
        """Gets the name of this JourneyAction.  # noqa: E501

        Name  # noqa: E501

        :return: The name of this JourneyAction.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JourneyAction.

        Name  # noqa: E501

        :param name: The name of this JourneyAction.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def organization(self):
        """Gets the organization of this JourneyAction.  # noqa: E501

        Organization  # noqa: E501

        :return: The organization of this JourneyAction.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this JourneyAction.

        Organization  # noqa: E501

        :param organization: The organization of this JourneyAction.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def namespace(self):
        """Gets the namespace of this JourneyAction.  # noqa: E501

        Namespace  # noqa: E501

        :return: The namespace of this JourneyAction.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this JourneyAction.

        Namespace  # noqa: E501

        :param namespace: The namespace of this JourneyAction.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def version(self):
        """Gets the version of this JourneyAction.  # noqa: E501

        Version  # noqa: E501

        :return: The version of this JourneyAction.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this JourneyAction.

        Version  # noqa: E501

        :param version: The version of this JourneyAction.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def active(self):
        """Gets the active of this JourneyAction.  # noqa: E501

        Active  # noqa: E501

        :return: The active of this JourneyAction.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this JourneyAction.

        Active  # noqa: E501

        :param active: The active of this JourneyAction.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def template_id(self):
        """Gets the template_id of this JourneyAction.  # noqa: E501

        Template Id  # noqa: E501

        :return: The template_id of this JourneyAction.  # noqa: E501
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this JourneyAction.

        Template Id  # noqa: E501

        :param template_id: The template_id of this JourneyAction.  # noqa: E501
        :type: str
        """

        self._template_id = template_id

    @property
    def rules(self):
        """Gets the rules of this JourneyAction.  # noqa: E501

        Rules  # noqa: E501

        :return: The rules of this JourneyAction.  # noqa: E501
        :rtype: object
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this JourneyAction.

        Rules  # noqa: E501

        :param rules: The rules of this JourneyAction.  # noqa: E501
        :type: object
        """

        self._rules = rules

    @property
    def actions(self):
        """Gets the actions of this JourneyAction.  # noqa: E501

        List of actions  # noqa: E501

        :return: The actions of this JourneyAction.  # noqa: E501
        :rtype: list[Action]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this JourneyAction.

        List of actions  # noqa: E501

        :param actions: The actions of this JourneyAction.  # noqa: E501
        :type: list[Action]
        """

        self._actions = actions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JourneyAction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JourneyAction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
