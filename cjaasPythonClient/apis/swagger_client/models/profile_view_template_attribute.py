# coding: utf-8

"""
    Azure Functions OpenAPI Extension

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProfileViewTemplateAttribute(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'str',
        'event': 'str',
        'metadata': 'str',
        'limit': 'int',
        'display_name': 'str',
        'lookback_duration_type': 'str',
        'lookback_period': 'int',
        'aggregation_mode': 'str',
        'verbose': 'bool'
    }

    attribute_map = {
        'version': 'version',
        'event': 'event',
        'metadata': 'metadata',
        'limit': 'limit',
        'display_name': 'displayName',
        'lookback_duration_type': 'lookbackDurationType',
        'lookback_period': 'lookbackPeriod',
        'aggregation_mode': 'aggregationMode',
        'verbose': 'verbose'
    }

    def __init__(self, version=None, event=None, metadata=None, limit=None, display_name=None, lookback_duration_type=None, lookback_period=None, aggregation_mode=None, verbose=None):  # noqa: E501
        """ProfileViewTemplateAttribute - a model defined in Swagger"""  # noqa: E501
        self._version = None
        self._event = None
        self._metadata = None
        self._limit = None
        self._display_name = None
        self._lookback_duration_type = None
        self._lookback_period = None
        self._aggregation_mode = None
        self._verbose = None
        self.discriminator = None
        if version is not None:
            self.version = version
        if event is not None:
            self.event = event
        if metadata is not None:
            self.metadata = metadata
        if limit is not None:
            self.limit = limit
        if display_name is not None:
            self.display_name = display_name
        if lookback_duration_type is not None:
            self.lookback_duration_type = lookback_duration_type
        if lookback_period is not None:
            self.lookback_period = lookback_period
        if aggregation_mode is not None:
            self.aggregation_mode = aggregation_mode
        if verbose is not None:
            self.verbose = verbose

    @property
    def version(self):
        """Gets the version of this ProfileViewTemplateAttribute.  # noqa: E501

        Attribute version. Depending on version the evaluation procedure might change.  # noqa: E501

        :return: The version of this ProfileViewTemplateAttribute.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ProfileViewTemplateAttribute.

        Attribute version. Depending on version the evaluation procedure might change.  # noqa: E501

        :param version: The version of this ProfileViewTemplateAttribute.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def event(self):
        """Gets the event of this ProfileViewTemplateAttribute.  # noqa: E501

        The Tape Event to search for.  # noqa: E501

        :return: The event of this ProfileViewTemplateAttribute.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this ProfileViewTemplateAttribute.

        The Tape Event to search for.  # noqa: E501

        :param event: The event of this ProfileViewTemplateAttribute.  # noqa: E501
        :type: str
        """

        self._event = event

    @property
    def metadata(self):
        """Gets the metadata of this ProfileViewTemplateAttribute.  # noqa: E501

        The specific metadata of the Tape Event, that needs to be evaluated.  # noqa: E501

        :return: The metadata of this ProfileViewTemplateAttribute.  # noqa: E501
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ProfileViewTemplateAttribute.

        The specific metadata of the Tape Event, that needs to be evaluated.  # noqa: E501

        :param metadata: The metadata of this ProfileViewTemplateAttribute.  # noqa: E501
        :type: str
        """

        self._metadata = metadata

    @property
    def limit(self):
        """Gets the limit of this ProfileViewTemplateAttribute.  # noqa: E501

        This will limit the number of matching tape events that are used, for building the view.  # noqa: E501

        :return: The limit of this ProfileViewTemplateAttribute.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ProfileViewTemplateAttribute.

        This will limit the number of matching tape events that are used, for building the view.  # noqa: E501

        :param limit: The limit of this ProfileViewTemplateAttribute.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def display_name(self):
        """Gets the display_name of this ProfileViewTemplateAttribute.  # noqa: E501

        Post evaluation the result to be generated using this display name.  # noqa: E501

        :return: The display_name of this ProfileViewTemplateAttribute.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ProfileViewTemplateAttribute.

        Post evaluation the result to be generated using this display name.  # noqa: E501

        :param display_name: The display_name of this ProfileViewTemplateAttribute.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def lookback_duration_type(self):
        """Gets the lookback_duration_type of this ProfileViewTemplateAttribute.  # noqa: E501

        One of the following: \"minutes\", \"hours\", \"days\" or \"none\"  # noqa: E501

        :return: The lookback_duration_type of this ProfileViewTemplateAttribute.  # noqa: E501
        :rtype: str
        """
        return self._lookback_duration_type

    @lookback_duration_type.setter
    def lookback_duration_type(self, lookback_duration_type):
        """Sets the lookback_duration_type of this ProfileViewTemplateAttribute.

        One of the following: \"minutes\", \"hours\", \"days\" or \"none\"  # noqa: E501

        :param lookback_duration_type: The lookback_duration_type of this ProfileViewTemplateAttribute.  # noqa: E501
        :type: str
        """

        self._lookback_duration_type = lookback_duration_type

    @property
    def lookback_period(self):
        """Gets the lookback_period of this ProfileViewTemplateAttribute.  # noqa: E501

        Number of minutes, hours or days to look back into the past, to search for the matching events in Tape  # noqa: E501

        :return: The lookback_period of this ProfileViewTemplateAttribute.  # noqa: E501
        :rtype: int
        """
        return self._lookback_period

    @lookback_period.setter
    def lookback_period(self, lookback_period):
        """Sets the lookback_period of this ProfileViewTemplateAttribute.

        Number of minutes, hours or days to look back into the past, to search for the matching events in Tape  # noqa: E501

        :param lookback_period: The lookback_period of this ProfileViewTemplateAttribute.  # noqa: E501
        :type: int
        """

        self._lookback_period = lookback_period

    @property
    def aggregation_mode(self):
        """Gets the aggregation_mode of this ProfileViewTemplateAttribute.  # noqa: E501

        Indicates how the matching events will be aggregated. \"Value\": All the metadata will be concatenated in a comma-separated string.\"Count\": We will evaluate the count of occurrences of the event metadata in the specified time period.\"Sum\": We will attempt to parse the metadata as integer and add the values.\"Max\", \"Average\", \"Min\": The metadata will be parsed as integer and then Max/Avg/Min of the values will be calculated respectively.\"Distinct\": We will select only the unique items from the metadata.   # noqa: E501

        :return: The aggregation_mode of this ProfileViewTemplateAttribute.  # noqa: E501
        :rtype: str
        """
        return self._aggregation_mode

    @aggregation_mode.setter
    def aggregation_mode(self, aggregation_mode):
        """Sets the aggregation_mode of this ProfileViewTemplateAttribute.

        Indicates how the matching events will be aggregated. \"Value\": All the metadata will be concatenated in a comma-separated string.\"Count\": We will evaluate the count of occurrences of the event metadata in the specified time period.\"Sum\": We will attempt to parse the metadata as integer and add the values.\"Max\", \"Average\", \"Min\": The metadata will be parsed as integer and then Max/Avg/Min of the values will be calculated respectively.\"Distinct\": We will select only the unique items from the metadata.   # noqa: E501

        :param aggregation_mode: The aggregation_mode of this ProfileViewTemplateAttribute.  # noqa: E501
        :type: str
        """

        self._aggregation_mode = aggregation_mode

    @property
    def verbose(self):
        """Gets the verbose of this ProfileViewTemplateAttribute.  # noqa: E501

        If set to true, indicates that the matching Journey Events to be included in the response as well.  # noqa: E501

        :return: The verbose of this ProfileViewTemplateAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._verbose

    @verbose.setter
    def verbose(self, verbose):
        """Sets the verbose of this ProfileViewTemplateAttribute.

        If set to true, indicates that the matching Journey Events to be included in the response as well.  # noqa: E501

        :param verbose: The verbose of this ProfileViewTemplateAttribute.  # noqa: E501
        :type: bool
        """

        self._verbose = verbose

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProfileViewTemplateAttribute, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProfileViewTemplateAttribute):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
