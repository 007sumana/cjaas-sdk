# coding: utf-8

"""
    Customer Journey as a Service (CJaaS)

    Something amazing, something special - the Customer Journey as a Service (CJaaS) is a core data layer to enable Journeys across products built upon serverless multi-cloud architecture, to be available as a SaaS service for applications inside and outside of Cisco. [**Cisco Experimental - Not For Production Use**]  # noqa: E501

    OpenAPI spec version: 0.5.0
    Contact: cjaas-earlyaccess@cisco.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OnlineOrchestration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type_of_offer': 'str',
        'display_title': 'str',
        'display_message': 'str',
        'offer_image': 'str',
        'max_width': 'int',
        'link': 'str',
        'one_time_jwt': 'str',
        'connect_id': 'str',
        'valid_till': 'datetime'
    }

    attribute_map = {
        'type_of_offer': 'typeOfOffer',
        'display_title': 'displayTitle',
        'display_message': 'displayMessage',
        'offer_image': 'offerImage',
        'max_width': 'maxWidth',
        'link': 'link',
        'one_time_jwt': 'oneTimeJWT',
        'connect_id': 'connectID',
        'valid_till': 'validTill'
    }

    def __init__(self, type_of_offer=None, display_title=None, display_message=None, offer_image=None, max_width=None, link=None, one_time_jwt=None, connect_id=None, valid_till=None):  # noqa: E501
        """OnlineOrchestration - a model defined in Swagger"""  # noqa: E501
        self._type_of_offer = None
        self._display_title = None
        self._display_message = None
        self._offer_image = None
        self._max_width = None
        self._link = None
        self._one_time_jwt = None
        self._connect_id = None
        self._valid_till = None
        self.discriminator = None
        if type_of_offer is not None:
            self.type_of_offer = type_of_offer
        if display_title is not None:
            self.display_title = display_title
        if display_message is not None:
            self.display_message = display_message
        if offer_image is not None:
            self.offer_image = offer_image
        if max_width is not None:
            self.max_width = max_width
        if link is not None:
            self.link = link
        if one_time_jwt is not None:
            self.one_time_jwt = one_time_jwt
        if connect_id is not None:
            self.connect_id = connect_id
        if valid_till is not None:
            self.valid_till = valid_till

    @property
    def type_of_offer(self):
        """Gets the type_of_offer of this OnlineOrchestration.  # noqa: E501


        :return: The type_of_offer of this OnlineOrchestration.  # noqa: E501
        :rtype: str
        """
        return self._type_of_offer

    @type_of_offer.setter
    def type_of_offer(self, type_of_offer):
        """Sets the type_of_offer of this OnlineOrchestration.


        :param type_of_offer: The type_of_offer of this OnlineOrchestration.  # noqa: E501
        :type: str
        """

        self._type_of_offer = type_of_offer

    @property
    def display_title(self):
        """Gets the display_title of this OnlineOrchestration.  # noqa: E501


        :return: The display_title of this OnlineOrchestration.  # noqa: E501
        :rtype: str
        """
        return self._display_title

    @display_title.setter
    def display_title(self, display_title):
        """Sets the display_title of this OnlineOrchestration.


        :param display_title: The display_title of this OnlineOrchestration.  # noqa: E501
        :type: str
        """

        self._display_title = display_title

    @property
    def display_message(self):
        """Gets the display_message of this OnlineOrchestration.  # noqa: E501


        :return: The display_message of this OnlineOrchestration.  # noqa: E501
        :rtype: str
        """
        return self._display_message

    @display_message.setter
    def display_message(self, display_message):
        """Sets the display_message of this OnlineOrchestration.


        :param display_message: The display_message of this OnlineOrchestration.  # noqa: E501
        :type: str
        """

        self._display_message = display_message

    @property
    def offer_image(self):
        """Gets the offer_image of this OnlineOrchestration.  # noqa: E501


        :return: The offer_image of this OnlineOrchestration.  # noqa: E501
        :rtype: str
        """
        return self._offer_image

    @offer_image.setter
    def offer_image(self, offer_image):
        """Sets the offer_image of this OnlineOrchestration.


        :param offer_image: The offer_image of this OnlineOrchestration.  # noqa: E501
        :type: str
        """

        self._offer_image = offer_image

    @property
    def max_width(self):
        """Gets the max_width of this OnlineOrchestration.  # noqa: E501


        :return: The max_width of this OnlineOrchestration.  # noqa: E501
        :rtype: int
        """
        return self._max_width

    @max_width.setter
    def max_width(self, max_width):
        """Sets the max_width of this OnlineOrchestration.


        :param max_width: The max_width of this OnlineOrchestration.  # noqa: E501
        :type: int
        """

        self._max_width = max_width

    @property
    def link(self):
        """Gets the link of this OnlineOrchestration.  # noqa: E501


        :return: The link of this OnlineOrchestration.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this OnlineOrchestration.


        :param link: The link of this OnlineOrchestration.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def one_time_jwt(self):
        """Gets the one_time_jwt of this OnlineOrchestration.  # noqa: E501


        :return: The one_time_jwt of this OnlineOrchestration.  # noqa: E501
        :rtype: str
        """
        return self._one_time_jwt

    @one_time_jwt.setter
    def one_time_jwt(self, one_time_jwt):
        """Sets the one_time_jwt of this OnlineOrchestration.


        :param one_time_jwt: The one_time_jwt of this OnlineOrchestration.  # noqa: E501
        :type: str
        """

        self._one_time_jwt = one_time_jwt

    @property
    def connect_id(self):
        """Gets the connect_id of this OnlineOrchestration.  # noqa: E501


        :return: The connect_id of this OnlineOrchestration.  # noqa: E501
        :rtype: str
        """
        return self._connect_id

    @connect_id.setter
    def connect_id(self, connect_id):
        """Sets the connect_id of this OnlineOrchestration.


        :param connect_id: The connect_id of this OnlineOrchestration.  # noqa: E501
        :type: str
        """

        self._connect_id = connect_id

    @property
    def valid_till(self):
        """Gets the valid_till of this OnlineOrchestration.  # noqa: E501


        :return: The valid_till of this OnlineOrchestration.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_till

    @valid_till.setter
    def valid_till(self, valid_till):
        """Sets the valid_till of this OnlineOrchestration.


        :param valid_till: The valid_till of this OnlineOrchestration.  # noqa: E501
        :type: datetime
        """

        self._valid_till = valid_till

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OnlineOrchestration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OnlineOrchestration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
